#!/usr/bin/env lua

---@class config
---@field compiler string
---@field flags string[]
---@field bin_name string
---@field linking string[]?
---@field pre_exec string[]?
---@field post_exec string[]?

---@alias file_hashes table<string, integer>

---@class make_flags
---@field clean boolean
---@field opt_level string
---@field debug_info boolean

---@class cache
---@field cfg config
---@field files file_hashes
---@field flags make_flags

---@type config
local config = require("config")

---@param a make_flags
---@param b make_flags
---@return boolean
local function comp_flags(a, b)
	return (a.clean == b.clean) and (a.debug_info == b.debug_info) and (a.opt_level == b.opt_level)
end

-- this is a linux way of getting all of the logical cores
-- so if we wanted to add cross platform support we'd have to figure that out, and do something else (maybe function ptr's(?))

-- <helper functions>
---@param o any
local function __dump(o)
	if type(o) == "table" then
		local s = "{"
		for k, v in pairs(o) do
			if type(k) ~= "number" then
				k = '"' .. k .. '"'
			end
			s = s .. "[" .. k .. "]=" .. __dump(v) .. ","
		end
		return s .. "}"
	elseif type(o) == "string" then
		return '"' .. o .. '"'
	else
		return tostring(o)
	end
end

---@param strs string[]
---@param sep string
---@return string
local function __flatten(strs, sep)
	local str = ""
	for i, s in pairs(strs) do
		if i == #strs then
			str = str .. s
		else
			str = str .. s .. sep
		end
	end
	return str
end

---@param filename string
---@param mode "r"|"w"|"a"|"r+"|"w+"|"a+"
---@return file*
local function __open(filename, mode)
	---@type file*?, string?
	local file, err = io.open(filename, mode)
	if file == nil then
		io.stderr:write("> Internal file opening error:")
		io.stderr:write(err .. "\n")
		os.exit(70)
	end
	return file
end

---@param thing string
---@param array string[]
---@return boolean
local function __isin(thing, array)
	for _, t in pairs(array) do
		if t == thing then
			return true
		end
	end
	return false
end

local helper <const> = {
	dump = __dump,
	flatten = __flatten,
	open = __open,
	isin = __isin,
}
-- </helper functions>

-- <hashing stuff>
---@param input string
---@return integer
local function fnv1a(input)
	local hash = 0xcbf29ce484222325
	for i = 1, #input do
		-- this seems to be working and mostly corrent
		hash = hash | tonumber(input:byte(i))
		hash = hash * 0x00000100000001B3 -- FNV_prime
	end
	return hash
end

---@param fpath string
---@return integer
local function hash_file(fpath)
	local file_to_hash = helper.open(fpath, "r")

	local hash = 0
	for line in file_to_hash:lines() do
		hash = hash + fnv1a(line)
	end

	io.close(file_to_hash)
	return hash
end
-- </hashing stuff>

-- <build helpers>
---@param path string
---@return boolean
local function has_cache_dir(path)
	for file in io.popen('ls -a "' .. path .. '"'):lines() do
		if file:find("__luamake_cache") ~= nil then
			return true
		end
	end
	return false
end

---@param self src_file
local function notify_deps(self)
	self.recompile = true
	for _, dep in pairs(self.deps) do
		dep:notify_deps()
	end
end

---@param self src_file
---@param file_name string
---@return boolean
local function depends_on(self, file_name)
	if self.name == file_name then
		return true
	end
	for _, dep in pairs(self.deps) do
		if dep.name == file_name then
			return true
		end
	end
	return false
end

---@class src_file
---@field name string
---@field hash integer
---@field recompile boolean
---@field deps src_file[]
---@field notify_deps function(self) nil
---@field depends_on function(self, src) boolean

local src_file = {}

---@param name string
---@param hash integer
---@return src_file
function src_file.new(name, hash)
	---@type src_file
	local src_file_tmp = {
		name = name,
		hash = hash,
		-- start off by assuming no files need to be recompiled
		recompile = false,
		deps = {},
		notify_deps = notify_deps,
		depends_on = depends_on,
	}
	return src_file_tmp
end

---@return src_file
local sentinal_src_file <const> = {
	name = "__sentinal_src_file__lua_cache",
	hash = fnv1a("__sentinal_src_file__lua_cache"),
	recompile = false,
	deps = {},
	notify_deps = notify_deps,
	depends_on = depends_on,
}

---@param path string
---@return table<string, src_file>
---@return cache
local function get_all_files(path)
	-- get all of the cpp files
	---@type table<string, src_file>
	local files = {}
	for file in io.popen('ls -a "' .. path .. "/src/" .. '"'):lines() do
		if file:find(".cpp") ~= nil then
			files[file] = src_file.new(file, hash_file(path .. "/src/" .. file))
		elseif file:find(".hpp") ~= nil then
			files[file] = src_file.new(file, hash_file(path .. "/src/" .. file))
		end
	end

	if not has_cache_dir(path .. "/build/") then
		-- make the lua cache dir + cache file
		-- !!! WARNING !!! need to add check to make sure path is properly formed, because this can technically be a dangerous thing (can probably do some code injection)
		os.execute("mkdir " .. path .. "/build/__luamake_cache/")
		os.execute("touch " .. path .. "/build/__luamake_cache/__cache.lua")

		-- populate the cache file with the current build state
		local new_cache_file = helper.open(path .. "/build/__luamake_cache/__cache.lua", "w")
		new_cache_file:write(string.format("local cache={cfg=%s,files={}};return cache", helper.dump(config)))
		io.close(new_cache_file)

		-- mark all files as needing to be recompiled
		for _, src in pairs(files) do
			src.recompile = true
		end

		---@type cache
		local cache = require(path .. "build/__luamake_cache/__cache")

		return files, cache
	end

	-- now we know that there is a cache dir
	---@type cache
	local cache = require(path .. "/build/__luamake_cache/__cache")

	-- <building up the dependency tree>
	for fname, src in pairs(files) do
		local path_to_file = path .. "/src/" .. fname
		local file = helper.open(path_to_file, "r")
		---@type string
		for line in file:lines() do
			if line:match('#include "') ~= nil then
				local _, _end = line:find('#include "')
				local included_file = line:sub(_end + 1, line:len() - 1)
				table.insert(src.deps, files[included_file])
			end
		end
		io.close(file)
	end

	-- add sentinal value
	for _, src in pairs(files) do
		table.insert(src.deps, sentinal_src_file)
	end

	-- reverse the direction of the dependencies graph
	for _, src in pairs(files) do
		-- bc we're going to be removing and adding to the array, we'll use an index bc idk if it'll invalidate any ptr's or something like that
		---@type integer
		for i = 1, #src.deps, 1 do
			if src.deps[i] == sentinal_src_file then
				break
			end
			table.insert(src.deps[i].deps, src)
		end
	end

	-- remove all of the files up until the sentinal value
	---@type integer
	for _, src in pairs(files) do
		local i = 1
		while src.deps[i] ~= sentinal_src_file do
			table.remove(src.deps, 1)
		end
		-- remove the actual sentinal_src_file
		table.remove(src.deps, 1)
	end
	-- </building up the dependency tree>

	-- loop over the dependencies to see what needs to be updated
	for fname, src in pairs(files) do
		if cache.files[fname] ~= nil then
			src.recompile = src.hash ~= cache.files[fname]
			if src.recompile then
				src:notify_deps()
			end
		else
			src.recompile = true
			src:notify_deps()
		end
		-- write_cache_file:write(("%s 0x%x\n"):format(file, fhash))
	end

	return files, cache
end

---@param path string
---@param cpp_files table<string, src_file>
---@return string
local function get_all_object_files(path, cpp_files)
	local r_str = ""
	---@type string[]
	local seen_files = {}
	for file, _ in pairs(cpp_files) do
		local fname_sans_ext <const> = file:sub(1, file:find("%.") - 1)
		if not helper.isin(fname_sans_ext, seen_files) then
			r_str = r_str .. path .. "/build/" .. fname_sans_ext .. ".o "
			table.insert(seen_files, fname_sans_ext)
		end
	end
	return r_str
end
-- </build helpers>

---@param path string
---@param flags make_flags
local function build(path, flags)
	if config.pre_exec ~= nil then
		for _, command in pairs(config.pre_exec) do
			io.stdout:write(("\t%s\n"):format(command))
			os.execute(command)
		end
	end

	local config_flags = "-" .. helper.flatten(config.flags, " -")
	if flags.debug_info then
		config_flags = config_flags .. " -g"
	end
	config_flags = config_flags .. " -" .. flags.opt_level

	-- get all the cpp files we need to recompile
	local cpp_files <const>, cache = get_all_files(path)
	local same_flags <const> = comp_flags(flags, cache.flags)
	cache.flags = flags

	-- compile all cpp files into obj files
	local recompile_output = false
	local had_error = false
	for file, src in pairs(cpp_files) do
		if (not same_flags or src.recompile) and file:find("%.hpp") == nil then
			recompile_output = true
			local command_str <const> = string.format(
				"%s %s -o " .. path .. "/build/%s.o -c " .. path .. "/src/%s",
				config.compiler,
				config_flags,
				file:sub(1, file:find("%.") - 1),
				file
			)
			io.stdout:write(("\t%s\n"):format(command_str))
			local _, _, code = os.execute(command_str)
			if code ~= 0 then
				had_error = true
			else
				cache.files[file] = src.hash
			end
		end
	end

	-- early return so we don't add files to the cache, recompile the output, or run the post_exec functions
	if had_error then
		return
	end

	for file, src in pairs(cpp_files) do
		-- technically overwriting the previously input hash values, but it's fine because the hash is the same
		cache.files[file] = src.hash
	end

	-- compile all of the obj files into the final executable
	if recompile_output then
		local obj_files <const> = get_all_object_files(path, cpp_files)
		---@type string
		local out_file <const> = path .. "/build/" .. (config.bin_name and config.bin_name or path .. ".out")
		-- should probably check if this is correct
		local linkage <const> = config.linking and "-l" .. helper.flatten(config.linking, " -l") or ""
		-- have to not include a space here bc we're including a space in the for loop
		local executable_command <const> =
			string.format("%s %s %s-o %s %s", config.compiler, config_flags, obj_files, out_file, linkage)
		io.stdout:write(("\t%s\n"):format(executable_command))
		os.execute(executable_command)
	end

	if config.post_exec ~= nil then
		for _, command in pairs(config.post_exec) do
			io.stdout:write(("\t%s\n"):format(command))
			os.execute(command)
		end
	end

	-- update the cache file
	local cache_file = helper.open(path .. "/build/__luamake_cache/__cache.lua", "w")
	cache_file:write(("local cache=%s;return cache"):format(helper.dump(cache)))
	io.close(cache_file)
end

---@return make_flags
local function parse_compiler_flags()
	local flags = {
		clean = false,
		opt_level = "O0",
		debug_info = false,
	}
	for i = 2, #arg, 1 do
		if arg[i] == "-c" then
			flags.clean = true
		end
		if arg[i] == "-r" then
			flags.opt_level = "O3"
		end
		if arg[i] == "-g" then
			flags.debug_info = true
		end
	end
	return flags
end

local function print_help()
	io.stderr:write("Useage: input the subdir being compiled\n")
end

---@param path string
---@param flags make_flags
local function clean_dir(path, flags)
	io.stdout:write(("\tremoving .o, .out, and cache files from: %s/build/\n"):format(path))

	local build_dir <const> = path .. "/build/"

	local dir_res = io.popen('ls -a "' .. build_dir .. '"'):lines()
	---@type string[]
	local files_to_delete = {}
	for file in dir_res do
		-- also adds any .out files :)
		if file:find(".o") ~= nil then
			table.insert(files_to_delete, file)
		end
	end

	for _, file in pairs(files_to_delete) do
		local command_str <const> = ("rm " .. build_dir .. "%s"):format(file)
		io.stdout:write(("\t%s\n"):format(command_str))
		os.execute(command_str)
	end

	if config.bin_name then
		local command_str <const> = ("rm " .. build_dir .. "%s"):format(config.bin_name)
		io.stdout:write(("\t%s\n"):format(command_str))
		os.execute(command_str)
	end

	if has_cache_dir(path .. "/build/") then
		local path_to_cache_file <const> = path .. "/build/__luamake_cache/__cache.lua"
		-- reset the file
		local cache_file = helper.open(path_to_cache_file, "w")
		-- add back the basic things needed for luamake to not crash
		---@type cache
		local cache = {
			["cfg"] = config,
			["files"] = {},
			["flags"] = flags,
		}
		-- might be able to speed this up by just embedding the values into the string instead of making a new object, but it's probably fine as is
		cache_file:write(("local cache=%s;return cache"):format(helper.dump(cache)))
		io.close(cache_file)
	end

	--[[
  -- remove cache dir if there
  if has_cache_dir(path .. "/build/") then
    -- reset the cache file
    -- local path_to_cache_file <const> = path .. "/build/__luamake_cache/__cache.lua"
    -- overwrite all info in the cache file (effectively deleting it)
    -- probably have to check on this to make sure we're not doing something really dumb right here
    -- local cache_file = helper.open(path_to_cache_file, "w")
    -- io.close(cache_file)
    -- idk if it's a good idea to completely remove the cache dir's and stuff(?)
    io.stdout:write((">running: [rm %s]\n"):format(path_to_cache_file))
    -- os.execute(("rm %s"):format(path_to_cache_file))
    local path_to_cache_dir <const> = path .. "/build/__luamake_cache"
    io.stdout:write((">running: [rm -d %s]\n"):format(path_to_cache_dir))
    -- os.execute(("rm -d %s"):format(path_to_cache_dir))
  end
  --]]
end

-- main
if #arg == 0 then
	print_help()
	os.exit(2)
else
	local dir = arg[1]
	local flags = parse_compiler_flags()

	if flags.clean then
		clean_dir(dir:byte(#dir) == ("/"):byte(1) and dir:sub(0, #dir - 1) or dir, flags)
	else
		-- <displaying the config for better feedback>
		io.stdout:write(
			string.format(
				"Building with config: {\n\tcompiler: %s,\n\tflags: %s,\n\tbinary name: %s,\n\tlinking: %s,\n\tpre_exec: %s,\n\tpost_exec: %s\n}\n",
				config.compiler,
				helper.flatten(config.flags, ", "),
				config.bin_name,
				config.linking and helper.flatten(config.linking, ", ") or "nil",
				config.pre_exec and helper.flatten(config.pre_exec, ", ") or "nil",
				config.post_exec and helper.flatten(config.post_exec, ", ") or "nil"
			)
		)
		-- </displaying the config for better feedback>
		build(dir:byte(#dir) == ("/"):byte(1) and dir:sub(0, #dir - 1) or dir, flags)
	end
	os.exit(0)
end
